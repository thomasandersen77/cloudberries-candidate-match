# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    # This includes 'main', all 'feature/*' branches, and any other branch you create.
    branches: [ "**" ]
  pull_request:
    # Run the workflow when a pull request is opened or updated
    # that targets the 'main' branch, acting as a quality check before merging.
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # ... (resten av din maven.yml-fil) ...

  code-review:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR diff
        id: diff
        env:
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          PR_DIFF=$(git diff $BASE_SHA $HEAD_SHA)
          {
            echo 'diff_content<<EOF'
            echo "$PR_DIFF"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

          - name: Call Gemini for review and prepare comment
              id: review
              env:
                DIFF_CONTENT: ${{ steps.diff.outputs.diff_content }}
                GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
              run: |
                PROMPT_TEXT="Du er en ekspert på programvareutvikling [...]. Her er kodeendringene:\n\n\`\`\`diff\n$DIFF_CONTENT\n\`\`\`"
                JSON_PAYLOAD=$(jq -n --arg content "$PROMPT_TEXT" '{ "contents": [ { "parts": [ { "text": $content } ] } ] }')
                
                curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=$GEMINI_API_KEY" \
                  -H "Content-Type: application/json" \
                  -d "$JSON_PAYLOAD" > gemini_response.json
                
                echo "--- Raw Gemini Response ---"
                cat gemini_response.json
                echo "---------------------------"
                
                # Hent ut kommentaren. Hvis den ikke finnes, returner en tom streng ""
                REVIEW_COMMENT=$(jq -r '.candidates[0].content.parts[0].text // ""' gemini_response.json)
                
                # Sjekk om resultatet er tomt
                if [[ -z "$REVIEW_COMMENT" ]]; then
                  echo "::error::Klarte ikke å hente ut en gyldig kommentar fra Gemini-responsen."
                  jq . gemini_response.json
                  exit 1
                fi
                
                {
                  echo 'comment<<EOF'
                  echo "$REVIEW_COMMENT"
                  echo 'EOF'
                } >> "$GITHUB_OUTPUT"