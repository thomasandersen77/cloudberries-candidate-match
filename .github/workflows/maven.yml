# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    # This includes 'main', all 'feature/*' branches, and any other branch you create.
    branches: [ "**" ]
  pull_request:
    # Run the workflow when a pull request is opened or updated
    # that targets the 'main' branch, acting as a quality check before merging.
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
  code-review:
    # Kj칮r denne jobben etter at 'build' er vellykket
    needs: build
    runs-on: ubuntu-latest
    # S칮rg for at den kun kj칮rer p친 pull requests
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Hent hele historikken for 친 kunne sammenligne branches
          fetch-depth: 0

      - name: Get PR diff
        id: diff
        run: |
          # Hent diff-en mellom head-branchen og base-branchen til PR-en
          git fetch origin ${{ github.base_ref }}
          PR_DIFF=$(git diff origin/${{ github.base_ref }} ${{ github.head_ref }})
          # For 친 h친ndtere flerrlinje-variabel i GitHub Actions
          echo "diff_content<<EOF" >> $GITHUB_OUTPUT
          echo "$PR_DIFF" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Call Gemini for review
        id: review
        run: |
          PROMPT_TEXT="Du er en ekspert p친 programvareutvikling med spesialkunnskap innen Domain-Driven Design, SOLID-prinsippene og Clean Code. Gjennomg친 f칮lgende kodeendringer fra en pull request. Gi konstruktiv og presis tilbakemelding basert p친 prinsipper som SRP, Meaningful Naming, sm친 funksjoner, og unng친else av Anemic Domain Models. Formater svaret i Markdown. Her er kodeendringene:\n\n\`\`\`diff\n${{ steps.diff.outputs.diff_content }}\n\`\`\`"
          
          # Bygg JSON-payload for Gemini API
          JSON_PAYLOAD=$(jq -n --arg content "$PROMPT_TEXT" \
            '{ "contents": [ { "parts": [ { "text": $content } ] } ] }')
          
          # Kall Gemini API
          GEMINI_RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")
          
          # Hent ut ren tekst fra responsen
          REVIEW_COMMENT=$(echo "$GEMINI_RESPONSE" | jq -r '.candidates[0].content.parts[0].text')
          
          # For 친 h친ndtere flerrlinje-variabel i GitHub Actions
          echo "comment<<EOF" >> $GITHUB_OUTPUT
          echo "$REVIEW_COMMENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post review comment to PR
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `### 游뱄 Gemini Code Review\n\n${{ steps.review.outputs.comment }}`
            });