# .github/workflows/maven.yml

name: Java CI with Maven and Gemini PR Review

on:
  pull_request:
    # Kj칮rer kun n친r en pull request mot main opprettes eller oppdateres
    branches: [ "main" ]

jobs:
  build_and_review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      # --- Steg 1: Kode-oppsett ---
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Henter hele historikken for 친 kunne sammenligne branches

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # --- Steg 2: Bygg og test ---
      - name: Build and Test with Maven
        run: mvn -B verify --file pom.xml

      # --- Steg 3: Kall Gemini API for kode-review ---
      - name: Perform Code Review with Gemini
        if: ${{ success() }} # Kj칮r kun hvis bygget var vellykket
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Leser prompten og diff-en inn i variabler
          PROMPT_TEMPLATE=$(cat .github/prompts/pr_review_prompt.txt)
          CODE_DIFF=$(git diff origin/main...HEAD)

          # Erstatter placeholder {diff} i prompten med den faktiske diff-en
          FULL_PROMPT="${PROMPT_TEMPLATE//\{diff\}/$CODE_DIFF}"

          # Bygger JSON-payload p친 en sikker m친te med jq for 친 unng친 feil med spesialtegn
          JSON_PAYLOAD=$(jq -n \
            --arg text_content "$FULL_PROMPT" \
            '{contents: [{parts: [{text: $text_content}]}]}')

          # Kaller Gemini API med den sikre payloaden
          GEMINI_RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=$GEMINI_API_KEY" \
               -H "Content-Type: application/json" \
               -d "$JSON_PAYLOAD")

          # Sjekker for feil i API-responsen f칮r vi fortsetter
          if echo "$GEMINI_RESPONSE" | jq -e '.error' > /dev/null; then
            echo "::error::Feil fra Gemini API:"
            echo "$GEMINI_RESPONSE"
            exit 1
          fi

          # Henter ut teksten fra responsen og lagrer til fil for neste steg
          echo "$GEMINI_RESPONSE" | jq -r '.candidates[0].content.parts[0].text' > gemini_review.txt
          echo "Gemini-review lagret i gemini_review.txt"

      # --- Steg 4: Publiser review som en kommentar p친 Pull Requesten ---
      - name: Comment on Pull Request
        if: ${{ success() && github.event_name == 'pull_request' }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('gemini_review.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### 游뱄 Gemini Code Review\n\n${review}`
            });
      # .github/workflows/azure-deploy-backend.yml
          name: Build and Deploy Backend to Azure

          env:
            AZURE_WEBAPP_NAME: 'candidate-match-backend'
            DOCKER_IMAGE_NAME: 'ghcr.io/thomasandersen77/cloudberries-candidate-match' # Bruk GHCR

          on:
            push:
              branches:
                - main
            workflow_dispatch:

          permissions:
            contents: 'read'
            packages: 'write'

          jobs:
            build-and-deploy:
              runs-on: ubuntu-latest
              steps:
                - name: Checkout repository
                  uses: actions/checkout@v4

                - name: Log in to GitHub Container Registry
                  uses: docker/login-action@v3
                  with:
                    registry: ghcr.io
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}

                - name: Build and push Docker image
                  uses: docker/build-push-action@v5
                  with:
                    context: .
                    file: ./Dockerfile # Stien til din Dockerfile
                    push: true
                    tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

                - name: Deploy to Azure Web App
                  uses: azure/webapps-deploy@v2
                  with:
                    app-name: ${{ env.AZURE_WEBAPP_NAME }}
                    publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_BACKEND }}
                    images: '${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}'