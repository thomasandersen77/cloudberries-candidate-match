# .github/workflows/maven.yml

name: Java CI with Maven and Gemini PR Review

on:
  pull_request:
    # Kj칮rer kun n친r en pull request mot main opprettes eller oppdateres
    branches: [ "main" ]

jobs:
  build_and_review:
    runs-on: ubuntu-latest
    permissions:
      contents: read # N칮dvendig for 친 kunne sjekke ut kode
      pull-requests: write # N칮dvendig for 친 kunne kommentere p친 en PR

    steps:
      # --- Steg 1: Kode-oppsett ---
      - name: Checkout code
        uses: actions/checkout@v4
        # Vi henter hele historikken for 친 kunne sammenligne branches
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # --- Steg 2: Bygg og test ---
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # --- Steg 3: Forbered data for AI-analyse ---
      - name: Read PR Review Prompt
        id: prompt_reader
        run: |
          # Leser innholdet fra prompt-filen og fjerner linjeskift for sikker h친ndtering
          PROMPT_CONTENT=$(tr -s '\n' ' ' < .github/prompts/pr_review_prompt.txt)
          echo "prompt_content=$PROMPT_CONTENT" >> $GITHUB_OUTPUT

      - name: Get code changes (diff)
        id: git_diff
        run: |
          # Henter endringene (diff) mellom feature-branchen og main-branchen
          # Dette er essensielt for 친 gi kontekst til AI-en
          DIFF_CONTENT=$(git diff origin/main...HEAD)
          # Vi m친 "escape" spesialtegn i diff-en for 친 kunne bruke den i JSON
          ESCAPED_DIFF=$(echo "$DIFF_CONTENT" | jq -R -s '.')
          echo "diff_content=$ESCAPED_DIFF" >> $GITHUB_OUTPUT

      # --- Steg 4: Kall Gemini API for kode-review ---
      - name: Perform Code Review with Gemini
        if: ${{ success() }} # Kj칮r kun hvis bygget var vellykket
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }} # Bruk secret for API-n칮kkel
        run: |
          # Kombinerer prompten med kodeendringene
          FULL_PROMPT="${{ steps.prompt_reader.outputs.prompt_content }}

          Her er kodeendringene som skal vurderes:
          ${{ steps.git_diff.outputs.diff_content }}"

          # Bygger JSON-payload for Gemini API-et
          JSON_PAYLOAD=$(cat <<EOF
          {
            "contents": [{
              "parts": [{
                "text": "$FULL_PROMPT"
              }]
            }]
          }
          EOF
          )

          # Kaller Gemini API med curl
          GEMINI_RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=$GEMINI_API_KEY" \
               -H "Content-Type: application/json" \
               -d "$JSON_PAYLOAD")

          # Henter ut teksten fra responsen med jq og lagrer til fil for neste steg
          echo "$GEMINI_RESPONSE" | jq -r '.candidates[0].content.parts[0].text' > gemini_review.txt
          echo "Gemini-review lagret i gemini_review.txt"

      # --- Steg 5: Publiser review som en kommentar p친 Pull Requesten ---
      - name: Comment on Pull Request
        if: ${{ success() && github.event_name == 'pull_request' }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('gemini_review.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### 游뱄 Gemini Code Review\n\n${review}`
            });